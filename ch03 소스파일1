// ListMain.c  //

#include <stdiio.h>
#include "ArrayList.h"

int main(void)
{
  // ArrayList의 생성 및 초기화 //
  List list;
  int data;
  ListInit(&list);
  
  // 5개의 데이터 저장 //
  LInsert(&list, 11); LInsert(&list, 11);
  LInsert(&list, 22); LInsert(&list, 22);
  LInsert(&list, 33); 
  
  // 저장된 데이터의 전체 출력 //
  printf("현재 데이터의 수 : %dx \n", LCount(&list));
  
  if(LFirst(&list, &data))
  {
  printf("%d ", data);
  
  while(LNext(&list, &data))
      printf("%d ", data);
  }
  printf(\n\n;);
  
  // 숫자 22을 탐색하여 모두 삭제 //
  if(Lfirst(&list, *data))
  {
    if(data==22)
      LRemove(&list);
      
    while(Lnext(&list, &data))
    {
      if(data==22)
      LRemove(&list);
    }
  }
  
  // 삭제 후 남은 데이터 전체 출력 //
  printf("현재 데이터의 수: %d \n", LCount(&list)):
  
  if(LFirst(&list. &data))
  {
    printf("%d ", data);
    
    while(LNext(5d ", data);
    
    while(LNext(&list, &data))
        printf("%d ", data);
   }
   printf("\n\n");
   return0;
}    

----------------------------------------------------

// ArrayList.h // 

#ifndef __ARRAY_LIST_H__
#define __ARRAY_LIST_H__

#define TRUE	1  // 참을 표현하기 위한 매크로 정의
#define FALSE	0  // 거짓을 표현하기 위한 매크로 정의

/*** ArrayList의 정의 ****/
#define LIST_LEN	100
typedef int LData;        // LData에 대한 typedef 선ㅇ언 (저장할 대상의 자료형 변경 위함)

typedef struct __ArrayList
{
	LData arr[LIST_LEN];   // 리스트의 저장소인 배열
	int numOfData;         // 저장된 데이터의 수
	int curPosition;       // 데이터 참조 위치 기록 (배열의 인덱스 값 저장)
} ArrayList;


/*** ArrayList와 관련된 연산들 ****/
typedef ArrayList List;   // 리스트 변경을 용이하게 하기 위한 typedef 선언

void ListInit(List * plist);               // 초기화
void LInsert(List * plist, LData data);    // 데이터 저장

int LFirst(List * plist, LData * pdata);   // 첫 데이터 참조
int LNext(List * plist, LData * pdata);    // 두 째 이후 데이터 참조
 
LData LRemove(List * plist);               // 참조한 데이터 삭제
int LCount(List * plist);                  // 저장된 데이터 수 반환
 
#endif

------------------------------------------------------------------------

// ArrayList.c //

#include <stdio.h>
#include "ArrayList.h"

void ListInit(List * plist)          // 초기화
{
	(plist->numOfData) = 0;
	(plist->curPosition) = -1;
}

void LInsert(List * plist, LData data)    // 데이터 저장
{
	if(plist->numOfData > LIST_LEN)  // 먼저 데이터 수가 배열의 길이 초과했는지 검사
	{
		puts("저장이 불가능합니다.");   // 저장할 공간 없는 경우
		return;
	}

	plist->arr[plist->numOfData] = data;   // 데이터 저장
	(plist->numOfData)++;                  // 저장된 데이터 수 증가
}

int LFirst(List * plist, LData * pdata)    // 첫번째 데이터 조회
{
	if(plist->numOfData == 0)      // 저장된 데이터가 하나도 없다면
		return FALSE;

	(plist->curPosition) = 0;      // 참조 위치 초기화! 첫 번째 데이터의 참조를 의미! ("0번째 인덱스 참조했다" 라는 의미) // LFirst 와 Lnext의 실질적인 차이점
	*pdata = plist->arr[0];        // pdata가 가리키는 공간에 데이터 저장
	return TRUE;
}

int LNext(List * plist, LData * pdata)        // 두번째 데이터 조회
{
	if(plist->curPosition >= (plist->numOfData)-1)   // 더 이상 참조할 데이터가 없다면
		return FALSE;

	(plist->curPosition)++;    // LFirst 와 Lnext의 실질적인 차이점
	*pdata = plist->arr[plist->curPosition];
	return TRUE;
}
/* LFirst에서는 curPosition에 저장된 값을 0으로 재설정함으로써 데이터 참조가 앞에서 부터 다시 진행되도록 하는 역할을 한다. 
   반면 LNext는 이 값을 증가시켜 순서대로 데이터를 참조할 수 있도록 한다. */

LData LRemove(List * plist)                 // 데이터 삭제
{
	int rpos = plist->curPosition;   // 삭제할 데이터의 인덱스 값 참조
	int num = plist->numOfData;
	int i;
	LData rdata = plist->arr[rpos];  // 삭제할 데이터를 임시로 저장 (백업 해둠)

	for(i=rpos; i<num-1; i++)
		plist->arr[i] = plist->arr[i+1];

	(plist->numOfData)--;
	(plist->curPosition)--;  // 참조위치를 앞으로 한 칸(왼쪽으로) 동 
	return rdata;       // 삭제한 데이터는 반환의 과정을 통해 되돌려 주는 것이 옳다!
}

int LCount(List * plist)          // 저장된 데이터 수 반환
{
	return plist->numOfData;
}
