/* Point라는 이름의 구조체 정의하기 */

// Point.h //
#ifndef __POINT_H__
#define __POINT_H__

typedef struct _point  // 구조체 변수의 주소값 저장
{
	int xpos;  // x좌표 정보
	int ypos;  // y좌표 정보
} Point;

// Point 변수의 xpos, ypos 값 설정 (초기화)
void SetPointPos(Point * ppos, int xpos, int ypos);

// Point 변수의 xpos, ypos 정보 출력 
void ShowPointPos(Point * ppos);

// 두 Point 변수의 비교
int PointComp(Point * pos1, Point * pos2); 

#endif

--------------------------------------------

// point.c //
#include <stdio.h>
#include "Point.h"

void SetPointPos(Point * ppos, int xpos, int ypos)  // 초기화 (값 저장)
{
	ppos->xpos = xpos;
	ppos->ypos = ypos;
}

void ShowPointPos(Point * ppos)
{
	printf("[%d, %d] \n", ppos->xpos, ppos->ypos);   // 출력
}

int PointComp(Point * pos1, Point * pos2)    // 비교
{
	if(pos1->xpos == pos2->xpos && pos1->ypos == pos2->ypos)  // 두 Point 변수의 멤버가 모두 같으면 0 반환
		return 0;
	else if(pos1->xpos == pos2->xpos)  //  xpos만 같은 경우 1 반환
		return 1;
	else if(pos1->ypos == pos2->ypos)  // ypos 만 같은 경우 2반환
		return 2;
	else
		return -1;    // 둘 다 같지 않은 경ㅇ우 -1 반환
}

-----------------------------------------------------------------

/* ArrayList.h 와 ArrayList.c 코드를 Point 구조체 변수의 주소 값을 저장할 수 있도록 변경 */

// ArrayList.h // 
#ifndef __ARRAY_LIST_H__
#define __ARRAY_LIST_H__

#include "Point.h"     // 첫 번째 변경 (추가한 헤더파일 의 선언문)

#define TRUE	1
#define FALSE	0

#define LIST_LEN	100

// typedef int LData;
typedef Point * LData;     // 두 번째 변경 (int -> Point 로 변경)

typedef struct __ArrayList
{
	LData arr[LIST_LEN];
	int numOfData;
	int curPosition;
} ArrayList;


typedef ArrayList List;

void ListInit(List * plist);
void LInsert(List * plist, LData data);

int LFirst(List * plist, LData * pdata);
int LNext(List * plist, LData * pdata);

LData LRemove(List * plist);
int LCount(List * plist);

#endif

------------------------------------------------------
// 제대로 작성 했다면 소스파일은 변경되면 안됨 //
// ArrayList. c //
#include <stdio.h>
#include "ArrayList.h"

void ListInit(List * plist)
{
	(plist->numOfData) = 0;
	(plist->curPosition) = -1;
}

void LInsert(List * plist, LData data)
{
	if(plist->numOfData > LIST_LEN) 
	{
		puts("저장이 불가능합니다.");
		return;
	}

	plist->arr[plist->numOfData] = data;
	(plist->numOfData)++;
}

int LFirst(List * plist, LData * pdata)
{
	if(plist->numOfData == 0)
		return FALSE;

	(plist->curPosition) = 0;
	*pdata = plist->arr[0];
	return TRUE;
}

int LNext(List * plist, LData * pdata)
{
	if(plist->curPosition >= (plist->numOfData)-1)
		return FALSE;

	(plist->curPosition)++;
	*pdata = plist->arr[plist->curPosition];
	return TRUE;
}

LData LRemove(List * plist)
{
	int rpos = plist->curPosition;
	int num = plist->numOfData;
	int i;
	LData rdata = plist->arr[rpos];

	for(i=rpos; i<num-1; i++)
		plist->arr[i] = plist->arr[i+1];

	(plist->numOfData)--;
	(plist->curPosition)--;
	return rdata;
}

int LCount(List * plist)
{
	return plist->numOfData;
}

-------------------------------------------------------

// PointListMain.c //
#include <stdio.h>
#include <stdlib.h>
#include "ArrayList.h"
#include "Point.h"

int main(void)
{
	List list;    // 리스트 구조체 변수 선언
	Point compPos;
	Point * ppos;

	ListInit(&list);  // 초기화

	/*** 4개의 데이터 저장 ***/
	ppos = (Point*)malloc(sizeof(Point));
	SetPointPos(ppos, 2, 1);
	LInsert(&list, ppos);

	ppos = (Point*)malloc(sizeof(Point)); // Point 구조체 변수를 동적 할당 (주소값 저장)
	SetPointPos(ppos, 2, 2);
	LInsert(&list, ppos);

	ppos = (Point*)malloc(sizeof(Point));
	SetPointPos(ppos, 3, 1);
	LInsert(&list, ppos);

	ppos = (Point*)malloc(sizeof(Point));
	SetPointPos(ppos, 3, 2);
	LInsert(&list, ppos);

	/*** 저장된 데이터의 출력 ***/
	printf("현재 데이터의 수: %d \n", LCount(&list));

	if(LFirst(&list, &ppos))
	{
		ShowPointPos(ppos);
		
		while(LNext(&list, &ppos))
			ShowPointPos(ppos);
	}
	printf("\n");

	/*** xpos가 2인 모든 데이터 삭제 ***/
	compPos.xpos=2;
	compPos.ypos=0;

	if(LFirst(&list, &ppos))
	{
		if(PointComp(ppos, &compPos)==1)
		{
			ppos=LRemove(&list);
			free(ppos);
		}
		
		while(LNext(&list, &ppos)) 
		{
			if(PointComp(ppos, &compPos)==1)
			{
				ppos=LRemove(&list);
				free(ppos);
			}
		}
	}

	/*** 삭제 후 남은 데이터 전체 출력 ***/
	printf("현재 데이터의 수: %d \n", LCount(&list));

	if(LFirst(&list, &ppos))
	{
		ShowPointPos(ppos);
		
		while(LNext(&list, &ppos))
			ShowPointPos(ppos);
	}
	printf("\n");

	return 0;
}
