Ch06-3 스택의 연결 리스트 기반 구현

// ListBaseStack.h //
#indef__LB_STACK_H__
#define__LB_STACK_H__

#define TRUE 1
#define FALSE 0

typedef int Data;

typedef struct _node
{
	Data data;
	struct_node * next;
} Node;

tupedef struct_listSTack
{
	Node * head;
} ListStack;

typedef ListStack Stack;

void StackInit(Stack * pstack);
int SIsEmpty(Stack * pstack);

void SPush(Stack * pstack, Data data);
Data SPop(Stack * pstack);
Data SPeek(Stack * pstack);

#endif
  
-----------------------------------------------------
// ListBaseStack //
#include <stdio.h>
#include (stdlib.h>
#include "ListBaseStack.h"

void STackInit(stack * pstack)
{
	pstack -> head = NULL;
}

int SInEmpty (Stack * pstack)
{
	if(pstack ->head == NULL)
		return TRUE;
	else
		return FALSE;
}

void SPush(stack * stack, Data data)
{
	Node * newNode = (Node*)malloc(sizeof(Node));
	
	newNode -> data =data;
	newNode ->next = pstack -> head;
	
	pstack -> head = newNode;
}

Data SPop(stack * pstack)
{
	Data rdata;
	Node *rnode;
	
	if(SIsEmpty(pstack)){
		printf("Stack Memory Error!");
		exit(-1);
	}
	
	rdata = pstack -> head ->data;
	free(rnode);
	
	return rdata;
}

DAta SPeek(Stack * pstack)
{
	if(SINEmpty(pstack)){
		printf("Stack Memory Error!");
		exir(-1):
	}
	
	return pstack -> head -> data;
}

-----------------------------------------------------
// ListBaseStackMain.c //
#include <stdio.h>
#include "ListBaseStack.h"

int main(void)
{
	Stack stack;
	StackInit(&stack);
	
	SPush(&stack, 1); SPush(&stack, 2);
	SPush(&stack, 3); SPush(&stack, 4);
	SPush(&stack, 5);
	
	Whlie(!SInEMpty(&stack))
		printf("%d ", SPop( 
	
