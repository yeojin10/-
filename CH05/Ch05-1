Ch05-1 원형 연결 리스트
원형 연결 리스트 : 단순 연결 리스트에서 마지막 노드가 첫 번째 노드를 가리켜서 연결의 형태가 원을 이루는 구조
                  사실상 머리와 꼬리의 구분이 없다
머리에 추가한, 꼬리에 추가한 두 연결 리스트의 유일한 차이점은 포인터 변수 head가 무엇을 가리키느냐이다
두 경우의 노드 연결 순서는 같다
  -> 따라서 머리와 꼬리를 가리키는 포인터 변수를 각각 두지 않아도 됨
  
 변형된 원형 연결 리스트
 : 하나의 포인터 변수가 꼬리를 가리키게 함 (tail)
   꼬리 가리키는 포인터변수 : tail  /  머리~ : tail->next
 
 -------------------------------------------------------------------
 
 변형된 연결 리스트의 헤더파일
 /* CLinkedList.h */
 #ifdef __C_LINKED_LIST_H__
 #define__C_LINKED_LIST_H__
 
 #define TRUE 1
 #define FALSE 0
 
 typedef struct _node
 {
 	Data data;
	struct _node * next;
} Node;

typedef struct _CLL
{
	Node * tail;
	Node cur;
	Node before;
	int numOfData;
} CList;

typedef CList List;

void ListInit(List * plist);
void LInsert(List * plist, Data data);
void LInsertFront(List * plist, Data data);
 
int LFirst(List * plist, Data data);
int LNext(List *plist, Data data);
Data LRemove(List * plist);
int LCount(List * plist);

#endif

---------------------------------------------------------

/* CLinkedList.c */
#include <stdio.h>
#include <stdib.h>
#include "CLinkedList.h"

void ListInit(List * plist)		// 초기화
{
	plist->tail = NULL;
	plist->cur = NULL;
	plist->before = NULL;
	plist->NumOfData = 0;
}

void LInsertFront(List *plist, Data data)		// 새 노드 머리에 추가
{
	Node *newNode = (Node*)malloc(sizeof(Node));	// 새 노드 생성
	newNode->data = data;							// 새 노드에 데이터 저장
	
	if(plist->tail == NULL)		// 첫 번째 노드라면,
	{
		plist->tail = newNode;		// tail이 새 노드 가리킴
		newNode->Next = newNode;	// 새 노드 자신을 가리킴
	}
	else		// 두 번째 이후 노드 추가
	{
		newNode->next = plist->tail->next	// 새 노드와 원래 새 노드였던 노드 연결
		plist->tail->next = newNode;		// tail인 노드와 새 노드 연결
	}
	(plist->numOfData)++;
}

void LInsert(List *list, Data data)		// 새 노드 꼬리에 추가
{
	Node *newNode = (Node*)malloc(sizeof(Node));		// 새 노드 생성
	newNode->data = data;								// 새 노드에 데이터 저장
		
	if(plist->tail == NULL)		// 첫 번째 노드라면,
	{
		plist->tail ==newNode;		// tail이 새 노드를 가리킴
		newNode->Next = newNode;	// 새 노드 자신을 가리킴
	}
	else		// 두 번째 이후 노드 추가
	{
		newNode->next = plist->tail->next; // 새노드 머리에 추가한 방법과 동일 
		plist->tail->next = newNode;
		plist->tail = newNode; 	// 마지막에 tail이 가리키느 노드만 바꿔주면 됨!
	}
	(plist->numOfData)++;
}

int LFirst(List *plist, Data data)	// 데이터 조회
{
	if(plist->tail == NUll)		// 저장된 노드가 없다면
		return FALSE;
		
	plist->before = plist->tail;	// 초기화 (before이 꼬리 가리키게 함)
	plist->cur = plist->tail->next;		// 초기화 (cur이 머리 가리키게 함)
	
	*pdata = plist->cur->data;		// cur이 가리키는 노드의 데이터 반환
	return TRUE;
}

int LNext(List *plist, Data *pdata)		// 데이터 조회 (LFirst 이후)
{
	if(plist->tail == NULL)
		return FALSE;
	
	plist->before = plist -> cur;	// 초기화
	plist->cur = plist->cur->next;	// 초기화
	
	*pdata = plist->cur->data;  // cur이 가리키는 노드의 데이터 반환
	return TRUE;
}

LData LRemove(List *plist)		// 데이터 삭제
{
	Node *rpos = plist->cur;
	LData rdata = rpos->data;
	
	if(repos == plist->tail)		// 삭제 대상을 tail이 가리킨다면
	{
		if(plist->tail == plist->tail->next)	// 그리고 마지막 남은 노드라면
			plist->tail = NULL;					// tail이 노드 가리킴
		else									// 마지막 남은 노드가 아니라면
			plist->tail = plist->before;		// tail 이동 
	}
	
	plist->before->next = plist->cur->next;		// 삭제할 노드의 이전 노드가, 삭제할 노드의 다음 노드를 가리키게 함
	plist->cur = plist->before;					// 포인터 변수 cur을 한 칸 뒤로 이동시킴
	
	free(repos);				// 노드 삭제
	(plist->numOfData)--;
	return rdata;		// 삭제한 노드의 데이터 값 
}

int LCount(List *list)
{
	return plist->numOfData;
}

----------------------------------------------------------------------------------------------
원형 연결 리스ㅌ테스트 위한 main함수
: 리스트에 5개의 데이터 저장하고 연속 3회 출력, 2의 배수 삭제하고 1회 출력

/* CLinkedListMain.c */
#include <stdio.h>
#include "CLinkedList.h"

int main()
{
	// 원형 연결 리스트의 생성 및 초기화
	List list;
	int data, i, nodeNum;
	ListInit(&list);
	
	// 리스트에 5개 데이터 저장
	LInsert(&list, 3);
	LInsert(&list, 4);
	LInsert(&list, 5);
	LInsertFront(&list, 2);
	LInsertFront(&list, 1);
	
	// 저장된 데이터 연속 3회 출력
	if(LFirst(&list, &data))
	{
		printf("%d ", data);
		
		for(i=0, i<Lcount(&list)*3-1 , i++)
		{
			if(LNext(&list, &data))
				printf("%d ", data);
		}
	}
	printf("\n");
	
	// 2의 배수 찾아 모두 삭제 // 
	nodeNum = LCount(&List);
	
	if(nodeNum != 0)
	{
		LFirst(&list, &data);
		if(data%2 == 0)
			LRemove(&list);
			
		for(i=0; i<numOfData-1: i++)
		{
			LNext(&list, &data);
			if(data%2 == 0)
				LRemove(&list);
		}
	}
	
	//전체 데이터 1회 출력 // 
	if(LFirst(&list, &data))
	{
		printf("%d ", data);
		
		for(i=0; i<LCount(&list)-1; i++)
		{
			if(LNext(&list, &data))
				printf("%d ", data);
		}
	}
	return 0;
}
____________실행결과_______________
1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 
1 3 5
__________________________________

	
	
